# ───────────────────────────────────────────────────────────────────────────────
# 1) MAP BLOCK: translate incoming “Upgrade” header into a proper Connection header
#    (necessary for WebSocket support)
# ───────────────────────────────────────────────────────────────────────────────
map $http_upgrade $connection_upgrade {
    default   upgrade;   # if client asks to “Upgrade” (e.g. WebSocket), keep it open
    ''        close;     # otherwise, Nginx will close the connection
}

# ───────────────────────────────────────────────────────────────────────────────
# 2) SERVER BLOCK: listen on port 8443 with SSL for Proxmox Proxy
# ───────────────────────────────────────────────────────────────────────────────
server {
    listen       8443 ssl;           # HTTPS port (you can change to 443 or another)
    server_name  192.168.86.87;      # your server’s hostname or IP address

    # ───────────────────────────────────────────────────────────────────────────
    # SSL SETTINGS: point to your certificate and private key
    # ───────────────────────────────────────────────────────────────────────────
    ssl_certificate     /etc/ssl/nginx/pve-proxy.crt;
    ssl_certificate_key /etc/ssl/nginx/pve-proxy.key;

    # ───────────────────────────────────────────────────────────────────────────
    # SANITY CHECK: simple Lua that logs on every reload to confirm Lua’s working
    # ───────────────────────────────────────────────────────────────────────────
    access_by_lua_block {
      ngx.log(ngx.ERR, "[GPU] nginx+lua is alive")
    }

    # ───────────────────────────────────────────────────────────────────────────
    # LOCATION #1: catch Proxmox API calls that start/stop/shutdown/reboot/reset a VM
    #              so we can hook in our GPU attach/detach script
    # ───────────────────────────────────────────────────────────────────────────
    location ~ ^/api2/(?:json|extjs)/nodes/[^/]+/qemu/\d+/status/(?:start|stop|shutdown|reboot|reset)$ {
        # ───────────────────────────────────────────────────────────────────────
        # LUA BLOCK: runs BEFORE proxying the request
        #  • parses the URI to extract VMID and action
        #  • determines if it’s a “pre-start” or “post-stop” hook
        #  • calls your gpu-autopick.sh script with appropriate args
        # ───────────────────────────────────────────────────────────────────────
        access_by_lua_block {
            -- pull the full request URI
            local uri    = ngx.var.request_uri

            -- extract the VMID: matches the “/<digits>/status” part
            local vmid   = uri:match("/qemu/(%d+)/status")

            -- extract the action: “start”, “stop”, etc.
            local action = uri:match("/status/(%a+)$")

            -- choose hook mode: pre-start when powering on, else post-stop
            local mode   = (action=="start") and "pre-start" or "post-stop"

            ngx.log(ngx.ERR, "[GPU] vm", vmid, " → hooking ", action, " as ", mode)

            -- build the shell command string
            local cmd = "sudo /usr/local/share/pve-hook-scripts/gpu-autopick.sh "
                      .. vmid .. " " .. mode .. " 2>&1"

            -- run the command and capture output + exit status
            local h   = io.popen(cmd)
            local out = h:read("*a")
            local ok, typ, st = h:close()

            -- log everything for debugging (sanitize newlines)
            ngx.log(ngx.ERR,
              "[GPU] cmd=", cmd,
              " ok=", tostring(ok),
              " type=", typ or "-",
              " stat=", tostring(st),
              " output=", out:gsub("\n","\\n"))
        }

        # ───────────────────────────────────────────────────────────────────────
        # PROXY SETTINGS: forward the request on to Proxmox API/UI
        #  • uses HTTP/1.1 for WebSocket console
        #  • passes along auth headers, cookies, CSRF token, etc.
        # ───────────────────────────────────────────────────────────────────────
        proxy_http_version 1.1;
        proxy_set_header  Upgrade             $http_upgrade;
        proxy_set_header  Connection          $connection_upgrade;
        proxy_set_header  Host                $host;
        proxy_set_header  X-Real-IP           $remote_addr;
        proxy_set_header  Authorization       $http_authorization;
        proxy_set_header  Cookie              $http_cookie;
        proxy_set_header  CSRFPreventionToken $http_csrfpreventiontoken;
        proxy_ssl_verify  off;               # skip SSL verify on localhost

        # timeouts: adjust if you see hanging requests
        proxy_connect_timeout 60s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;

        proxy_pass https://127.0.0.1:8006;   # your Proxmox backend
    }

    # ───────────────────────────────────────────────────────────────────────────
    # LOCATION #2 (DEFAULT): everything else (UI, API, WebSockets, shell)
    # ───────────────────────────────────────────────────────────────────────────
    location / {
        proxy_http_version 1.1;
        proxy_set_header  Upgrade             $http_upgrade;
        proxy_set_header  Connection          $connection_upgrade;
        proxy_set_header  Host                $host;
        proxy_set_header  X-Real-IP           $remote_addr;
        proxy_set_header  Authorization       $http_authorization;
        proxy_set_header  Cookie              $http_cookie;
        proxy_set_header  CSRFPreventionToken $http_csrfpreventiontoken;
        proxy_ssl_verify  off;

        # longer timeouts for web console
        proxy_read_timeout   3600s;
        proxy_send_timeout   3600s;

        proxy_pass https://127.0.0.1:8006;
    }

    # ───────────────────────────────────────────────────────────────────────────
    # LOGGING
    # ───────────────────────────────────────────────────────────────────────────
    access_log  /var/log/nginx/pve-proxy-access.log;
    error_log   /var/log/nginx/pve-proxy-error.log  debug;
}
